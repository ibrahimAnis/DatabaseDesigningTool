function Field()
{
this.code=0;
this.name="";
this.datatype=null;
this.width=0;
this.numberOfDecimalPlaces=0;
this.isPrimaryKey=true;
this.isAutoIncrement=true;
this.isUnique=true;
this.isNotNull=true;
this.defaultValue="";
this.checkConstraint="";
this.note="";
}
function FileDownloadWrapper()
{
this.file=null;
this.fileName="";
this.contentType="";
}
function Engine()
{
this.code=0;
this.name="";
}
function DatabaseArchitecture()
{
this.code=0;
this.name="";
this.maxWidthOfColumnName=0;
this.maxWidthOfRelationshipName=0;
this.maxWidthOfTableName=0;
}
function Datatype()
{
this.code=0;
this.datatype="";
this.maxWidth=0;
this.defaultSize=0;
this.maxWidthOfPrecision=0;
this.allowAutoIncrement=true;
}
function TMForward()
{
}
function Table()
{
this.code=0;
this.name="";
this.note="";
this.point=null;
this.engine=null;
this.numberOfFields=0;
}
function Point()
{
this.abscissa=0;
this.ordinate=0;
}
function Project()
{
this.code=0;
this.title="";
this.dateOfCreation=0;
this.timeOfCreation=0;
this.databaseArchitecture=null;
}
function ProjectserviceManager()
{
this.setField=function(argument1,successHandler,exceptionHandler)
{
service.getJSON('projectservice/field?argument-1='+encodeURI(argument1),null,function(){
successHandler();
},function(exception){
exceptionHandler(exception);
});
}
this.setDatabaseArchitecture=function(argument1,successHandler,exceptionHandler)
{
service.getJSON('projectservice/databaseArchitecture?argument-1='+encodeURI(argument1),null,function(){
successHandler();
},function(exception){
exceptionHandler(exception);
});
}
this.setDatatype=function(argument1,successHandler,exceptionHandler)
{
service.getJSON('projectservice/datatype?argument-1='+encodeURI(argument1),null,function(){
successHandler();
},function(exception){
exceptionHandler(exception);
});
}
this.setEngine=function(argument1,successHandler,exceptionHandler)
{
service.getJSON('projectservice/engine?argument-1='+encodeURI(argument1),null,function(){
successHandler();
},function(exception){
exceptionHandler(exception);
});
}
this.setPoint=function(argument1,successHandler,exceptionHandler)
{
service.getJSON('projectservice/point?argument-1='+encodeURI(argument1),null,function(){
successHandler();
},function(exception){
exceptionHandler(exception);
});
}
this.setTable=function(argument1,successHandler,exceptionHandler)
{
service.getJSON('projectservice/table?argument-1='+encodeURI(argument1),null,function(){
successHandler();
},function(exception){
exceptionHandler(exception);
});
}
this.createProject=function(argument1,argument2,successHandler,exceptionHandler)
{
service.getJSON('projectservice/createProject?argument-1='+encodeURI(argument1)+'&'+'argument-2='+encodeURI(argument2),null,function(result){
successHandler(result);
},function(exception){
exceptionHandler(exception);
});
}
this.saveProject=function(argument1,successHandler,exceptionHandler)
{
service.postJSON('projectservice/saveProject',{
'argument-1': argument1
},
function(result){
successHandler(result);
},function(exception){
exceptionHandler(exception);
});
}
this.openProject=function(argument1,argument2,successHandler,exceptionHandler)
{
service.getJSON('projectservice/openProject?argument-1='+encodeURI(argument1)+'&'+'argument-2='+encodeURI(argument2),null,function(result){
successHandler(result);
},function(exception){
exceptionHandler(exception);
});
}
this.getProject=function(successHandler,exceptionHandler)
{
service.getJSON('projectservice/getProject',null,function(result){
successHandler(result);
},function(exception){
exceptionHandler(exception);
});
}
this.download=function(successHandler,exceptionHandler)
{
service.getJSON('projectservice/download',null,function(result){
successHandler(result);
},function(exception){
exceptionHandler(exception);
});
}
}
var projectserviceManager=new ProjectserviceManager();
